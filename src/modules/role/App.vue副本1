<template>
<el-container>
  <el-header class="header">  
    <el-breadcrumb separator-class="el-icon-arrow-right" class="breadcrumb">
      <el-breadcrumb-item>用户管理</el-breadcrumb-item>
      <el-breadcrumb-item>角色列表</el-breadcrumb-item>
    </el-breadcrumb>
  </el-header>
  <el-main class="main">
    <el-table :data="list" v-loading="isLoading" size="small" style="width: 100%" :empty-text="mainTableEmptyText">
      <!-- <el-table-column prop="displayOrder" label="#" width="40"></el-table-column> -->
      <el-table-column prop="name" label="名称"></el-table-column>
      <!-- <el-table-column align="center" width="42">
        <template slot-scope="scope">
          <el-button type="text" size="small" icon="el-icon-sort-up" v-if="!scope.row.isSystem && scope.row.displayOrder > 2"></el-button>
        </template>
      </el-table-column>
      <el-table-column align="center" width="42">
        <template slot-scope="scope">
          <el-button type="text" size="small" icon="el-icon-sort-down" v-if="!scope.row.isSystem"></el-button>
        </template>
      </el-table-column> -->
      <el-table-column align="center" width="42">
        <template slot-scope="scope">
          <el-button type="text" size="small" icon="el-icon-rank" :class="{ 'ignore-elements': scope.row.isSystem }" :show="!scope.row.isSystem"></el-button>
        </template>
      </el-table-column>
      <el-table-column align="center" width="42">
        <template slot-scope="scope">
          <el-button type="text" size="small" icon="el-icon-edit" @click="dialogFormVisible = true" :if="!scope.row.isSystem"></el-button>
        </template>
      </el-table-column>
      <el-table-column align="center" width="42">
        <template slot-scope="scope">
          <el-button type="text" size="small" icon="el-icon-delete" :if="!scope.row.isSystem"></el-button>
        </template>
      </el-table-column>
    </el-table>
    <el-dialog title="编辑角色" :visible.sync="dialogFormVisible" width="40%">
      <el-form ref="form" :model="form" size="small">
        <el-form-item label="角色名称">
          <el-input v-model="form.name" auto-complete="off"></el-input>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取 消</el-button>
        <el-button type="primary" @click="dialogFormVisible = false">确 定</el-button>
      </div>
    </el-dialog>
  </el-main>
</el-container>
</template>

<script>
import Sortable from 'sortablejs'
import api from '@/utils/api'

export default {
  data () {
    return {
      isLoading: false,
      dialogFormVisible: false,
      form: {
        name: null
      },
      list: null
    }
  },
  mounted () {
    this.getList()
  },
  computed: {
    mainTableEmptyText: function () {
      return this.isLoading ? '加载中...' : '暂无数据'
    }
  },
  methods: {
    getList () {
      this.isLoading = true
      api.getRoleList().then(response => {
        this.isLoading = false
        this.list = response.data.roles
        this.$nextTick(() => {
          this.setupSortable()
        })
      }, error => {
        this.isLoading = false
        this.$message({
          message: error.message,
          type: 'error'
        })
      })
    },
    setupSortable () {
      const el = document.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]
      // if (this.sortable) this.sortable.destroy()
      this.sortable = Sortable.create(el, {
        group: 'name',
        handle: '.el-icon-rank',
        filter: '.ignore-elements',
        onMove: function (evt, originalEvent) {
          return evt.dragged.rowIndex !== 0 && evt.related.rowIndex !== 0
        },
        onEnd: evt => {
          if (evt.oldIndex === evt.newIndex) return
          // 更新成功后重新设置 list 元素的 DisplayOrder；并且将更新数据同步到服务器。
          // 同步数据库时，显示 loading 不可继续拖动(也可将 sortable 的 disabled 设置为 true，但这样体验不好)。
          const sourceDisplayOrder = evt.oldIndex + 1
          const targetDisplayOrder = evt.newIndex + 1
          /*
          // 客户端 DisplayOrder 更新
          let source = this.list[sourceDisplayOrder - 1]
          if (sourceDisplayOrder > targetDisplayOrder) {
            // 向上移动。目标节点及以下，至，源节点之间的节点，序号 + 1
            for (let i = 0; i < this.list.length; i++) {
              if (this.list[i].DisplayOrder >= targetDisplayOrder && this.list[i].DisplayOrder < sourceDisplayOrder) {
                this.list[i].DisplayOrder++
              }
            }
          } else {
            for (let i = 0; i < this.list.length; i++) {
              // 向下移动。目标节点及以上，至，源节点之间的节点，序号 - 1
              if (this.list[i].DisplayOrder <= targetDisplayOrder && this.list[i].DisplayOrder > sourceDisplayOrder) {
                this.list[i].DisplayOrder--
              }
            }
          }
          source.DisplayOrder = targetDisplayOrder
          */

          // 服务器同步
          const moveRoleParams = {
            SourceDisplayOrder: sourceDisplayOrder,
            TargetDisplayOrder: targetDisplayOrder
          }
          this.isLoading = true
          api.moveRole(moveRoleParams).then(response => {
            this.isLoading = false
            // this.getList()
          }, error => {
            this.isLoading = false
            this.$message({
              message: error.message,
              type: 'error'
            })
          })
        }
      })
    }
  }
}
</script>

<style lang="scss" scoped>

</style>